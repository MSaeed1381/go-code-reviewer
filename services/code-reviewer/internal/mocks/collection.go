// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/saeedzare/Documents/go/pkg/mod/github.com/amikos-tech/chroma-go@v0.2.3/pkg/api/v2/collection.go
//
// Generated by this command:
//
//	mockgen -source=/Users/saeedzare/Documents/go/pkg/mod/github.com/amikos-tech/chroma-go@v0.2.3/pkg/api/v2/collection.go -destination=mocks/collection.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v2 "github.com/amikos-tech/chroma-go/pkg/api/v2"
	embeddings "github.com/amikos-tech/chroma-go/pkg/embeddings"
	gomock "go.uber.org/mock/gomock"
)

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
	isgomock struct{}
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCollection) Add(ctx context.Context, opts ...v2.CollectionAddOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCollectionMockRecorder) Add(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCollection)(nil).Add), varargs...)
}

// Close mocks base method.
func (m *MockCollection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCollectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCollection)(nil).Close))
}

// Configuration mocks base method.
func (m *MockCollection) Configuration() v2.CollectionConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configuration")
	ret0, _ := ret[0].(v2.CollectionConfiguration)
	return ret0
}

// Configuration indicates an expected call of Configuration.
func (mr *MockCollectionMockRecorder) Configuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configuration", reflect.TypeOf((*MockCollection)(nil).Configuration))
}

// Count mocks base method.
func (m *MockCollection) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCollectionMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCollection)(nil).Count), ctx)
}

// Database mocks base method.
func (m *MockCollection) Database() v2.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(v2.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockCollectionMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockCollection)(nil).Database))
}

// Delete mocks base method.
func (m *MockCollection) Delete(ctx context.Context, opts ...v2.CollectionDeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCollectionMockRecorder) Delete(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCollection)(nil).Delete), varargs...)
}

// Dimension mocks base method.
func (m *MockCollection) Dimension() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dimension")
	ret0, _ := ret[0].(int)
	return ret0
}

// Dimension indicates an expected call of Dimension.
func (mr *MockCollectionMockRecorder) Dimension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dimension", reflect.TypeOf((*MockCollection)(nil).Dimension))
}

// Get mocks base method.
func (m *MockCollection) Get(ctx context.Context, opts ...v2.CollectionGetOption) (v2.GetResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(v2.GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCollectionMockRecorder) Get(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCollection)(nil).Get), varargs...)
}

// ID mocks base method.
func (m *MockCollection) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCollectionMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCollection)(nil).ID))
}

// Metadata mocks base method.
func (m *MockCollection) Metadata() v2.CollectionMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(v2.CollectionMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockCollectionMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockCollection)(nil).Metadata))
}

// ModifyConfiguration mocks base method.
func (m *MockCollection) ModifyConfiguration(ctx context.Context, newConfig v2.CollectionConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyConfiguration", ctx, newConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyConfiguration indicates an expected call of ModifyConfiguration.
func (mr *MockCollectionMockRecorder) ModifyConfiguration(ctx, newConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConfiguration", reflect.TypeOf((*MockCollection)(nil).ModifyConfiguration), ctx, newConfig)
}

// ModifyMetadata mocks base method.
func (m *MockCollection) ModifyMetadata(ctx context.Context, newMetadata v2.CollectionMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyMetadata", ctx, newMetadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyMetadata indicates an expected call of ModifyMetadata.
func (mr *MockCollectionMockRecorder) ModifyMetadata(ctx, newMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyMetadata", reflect.TypeOf((*MockCollection)(nil).ModifyMetadata), ctx, newMetadata)
}

// ModifyName mocks base method.
func (m *MockCollection) ModifyName(ctx context.Context, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyName", ctx, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyName indicates an expected call of ModifyName.
func (mr *MockCollectionMockRecorder) ModifyName(ctx, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyName", reflect.TypeOf((*MockCollection)(nil).ModifyName), ctx, newName)
}

// Name mocks base method.
func (m *MockCollection) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCollectionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCollection)(nil).Name))
}

// Query mocks base method.
func (m *MockCollection) Query(ctx context.Context, opts ...v2.CollectionQueryOption) (v2.QueryResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(v2.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCollectionMockRecorder) Query(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCollection)(nil).Query), varargs...)
}

// Tenant mocks base method.
func (m *MockCollection) Tenant() v2.Tenant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tenant")
	ret0, _ := ret[0].(v2.Tenant)
	return ret0
}

// Tenant indicates an expected call of Tenant.
func (mr *MockCollectionMockRecorder) Tenant() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tenant", reflect.TypeOf((*MockCollection)(nil).Tenant))
}

// Update mocks base method.
func (m *MockCollection) Update(ctx context.Context, opts ...v2.CollectionUpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCollectionMockRecorder) Update(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCollection)(nil).Update), varargs...)
}

// Upsert mocks base method.
func (m *MockCollection) Upsert(ctx context.Context, opts ...v2.CollectionAddOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upsert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCollectionMockRecorder) Upsert(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCollection)(nil).Upsert), varargs...)
}

// MockCollectionOp is a mock of CollectionOp interface.
type MockCollectionOp struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionOpMockRecorder
	isgomock struct{}
}

// MockCollectionOpMockRecorder is the mock recorder for MockCollectionOp.
type MockCollectionOpMockRecorder struct {
	mock *MockCollectionOp
}

// NewMockCollectionOp creates a new mock instance.
func NewMockCollectionOp(ctrl *gomock.Controller) *MockCollectionOp {
	mock := &MockCollectionOp{ctrl: ctrl}
	mock.recorder = &MockCollectionOpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionOp) EXPECT() *MockCollectionOpMockRecorder {
	return m.recorder
}

// EmbedData mocks base method.
func (m *MockCollectionOp) EmbedData(ctx context.Context, ef embeddings.EmbeddingFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmbedData", ctx, ef)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmbedData indicates an expected call of EmbedData.
func (mr *MockCollectionOpMockRecorder) EmbedData(ctx, ef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmbedData", reflect.TypeOf((*MockCollectionOp)(nil).EmbedData), ctx, ef)
}

// MarshalJSON mocks base method.
func (m *MockCollectionOp) MarshalJSON() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalJSON")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalJSON indicates an expected call of MarshalJSON.
func (mr *MockCollectionOpMockRecorder) MarshalJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalJSON", reflect.TypeOf((*MockCollectionOp)(nil).MarshalJSON))
}

// PrepareAndValidate mocks base method.
func (m *MockCollectionOp) PrepareAndValidate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareAndValidate")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareAndValidate indicates an expected call of PrepareAndValidate.
func (mr *MockCollectionOpMockRecorder) PrepareAndValidate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAndValidate", reflect.TypeOf((*MockCollectionOp)(nil).PrepareAndValidate))
}

// UnmarshalJSON mocks base method.
func (m *MockCollectionOp) UnmarshalJSON(b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalJSON", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJSON indicates an expected call of UnmarshalJSON.
func (mr *MockCollectionOpMockRecorder) UnmarshalJSON(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJSON", reflect.TypeOf((*MockCollectionOp)(nil).UnmarshalJSON), b)
}

// MockCollectionConfiguration is a mock of CollectionConfiguration interface.
type MockCollectionConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionConfigurationMockRecorder
	isgomock struct{}
}

// MockCollectionConfigurationMockRecorder is the mock recorder for MockCollectionConfiguration.
type MockCollectionConfigurationMockRecorder struct {
	mock *MockCollectionConfiguration
}

// NewMockCollectionConfiguration creates a new mock instance.
func NewMockCollectionConfiguration(ctrl *gomock.Controller) *MockCollectionConfiguration {
	mock := &MockCollectionConfiguration{ctrl: ctrl}
	mock.recorder = &MockCollectionConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionConfiguration) EXPECT() *MockCollectionConfigurationMockRecorder {
	return m.recorder
}

// GetRaw mocks base method.
func (m *MockCollectionConfiguration) GetRaw(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRaw indicates an expected call of GetRaw.
func (mr *MockCollectionConfigurationMockRecorder) GetRaw(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*MockCollectionConfiguration)(nil).GetRaw), key)
}

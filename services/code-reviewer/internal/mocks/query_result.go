// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/saeedzare/Documents/go/pkg/mod/github.com/amikos-tech/chroma-go@v0.2.3/pkg/api/v2/results.go
//
// Generated by this command:
//
//	mockgen -source=/Users/saeedzare/Documents/go/pkg/mod/github.com/amikos-tech/chroma-go@v0.2.3/pkg/api/v2/results.go -destination=mocks/query_result.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	v2 "github.com/amikos-tech/chroma-go/pkg/api/v2"
	embeddings "github.com/amikos-tech/chroma-go/pkg/embeddings"
	gomock "go.uber.org/mock/gomock"
)

// MockGetResult is a mock of GetResult interface.
type MockGetResult struct {
	ctrl     *gomock.Controller
	recorder *MockGetResultMockRecorder
	isgomock struct{}
}

// MockGetResultMockRecorder is the mock recorder for MockGetResult.
type MockGetResultMockRecorder struct {
	mock *MockGetResult
}

// NewMockGetResult creates a new mock instance.
func NewMockGetResult(ctrl *gomock.Controller) *MockGetResult {
	mock := &MockGetResult{ctrl: ctrl}
	mock.recorder = &MockGetResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetResult) EXPECT() *MockGetResultMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockGetResult) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockGetResultMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockGetResult)(nil).Count))
}

// GetDocuments mocks base method.
func (m *MockGetResult) GetDocuments() v2.Documents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocuments")
	ret0, _ := ret[0].(v2.Documents)
	return ret0
}

// GetDocuments indicates an expected call of GetDocuments.
func (mr *MockGetResultMockRecorder) GetDocuments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocuments", reflect.TypeOf((*MockGetResult)(nil).GetDocuments))
}

// GetEmbeddings mocks base method.
func (m *MockGetResult) GetEmbeddings() embeddings.Embeddings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbeddings")
	ret0, _ := ret[0].(embeddings.Embeddings)
	return ret0
}

// GetEmbeddings indicates an expected call of GetEmbeddings.
func (mr *MockGetResultMockRecorder) GetEmbeddings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbeddings", reflect.TypeOf((*MockGetResult)(nil).GetEmbeddings))
}

// GetIDs mocks base method.
func (m *MockGetResult) GetIDs() v2.DocumentIDs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDs")
	ret0, _ := ret[0].(v2.DocumentIDs)
	return ret0
}

// GetIDs indicates an expected call of GetIDs.
func (mr *MockGetResultMockRecorder) GetIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDs", reflect.TypeOf((*MockGetResult)(nil).GetIDs))
}

// GetMetadatas mocks base method.
func (m *MockGetResult) GetMetadatas() v2.DocumentMetadatas {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadatas")
	ret0, _ := ret[0].(v2.DocumentMetadatas)
	return ret0
}

// GetMetadatas indicates an expected call of GetMetadatas.
func (mr *MockGetResultMockRecorder) GetMetadatas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadatas", reflect.TypeOf((*MockGetResult)(nil).GetMetadatas))
}

// Next mocks base method.
func (m *MockGetResult) Next() (v2.GetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(v2.GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockGetResultMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockGetResult)(nil).Next))
}

// ToRecords mocks base method.
func (m *MockGetResult) ToRecords() v2.Records {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRecords")
	ret0, _ := ret[0].(v2.Records)
	return ret0
}

// ToRecords indicates an expected call of ToRecords.
func (mr *MockGetResultMockRecorder) ToRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRecords", reflect.TypeOf((*MockGetResult)(nil).ToRecords))
}

// MockQueryResult is a mock of QueryResult interface.
type MockQueryResult struct {
	ctrl     *gomock.Controller
	recorder *MockQueryResultMockRecorder
	isgomock struct{}
}

// MockQueryResultMockRecorder is the mock recorder for MockQueryResult.
type MockQueryResultMockRecorder struct {
	mock *MockQueryResult
}

// NewMockQueryResult creates a new mock instance.
func NewMockQueryResult(ctrl *gomock.Controller) *MockQueryResult {
	mock := &MockQueryResult{ctrl: ctrl}
	mock.recorder = &MockQueryResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryResult) EXPECT() *MockQueryResultMockRecorder {
	return m.recorder
}

// CountGroups mocks base method.
func (m *MockQueryResult) CountGroups() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGroups")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountGroups indicates an expected call of CountGroups.
func (mr *MockQueryResultMockRecorder) CountGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGroups", reflect.TypeOf((*MockQueryResult)(nil).CountGroups))
}

// GetDistancesGroups mocks base method.
func (m *MockQueryResult) GetDistancesGroups() []embeddings.Distances {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistancesGroups")
	ret0, _ := ret[0].([]embeddings.Distances)
	return ret0
}

// GetDistancesGroups indicates an expected call of GetDistancesGroups.
func (mr *MockQueryResultMockRecorder) GetDistancesGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistancesGroups", reflect.TypeOf((*MockQueryResult)(nil).GetDistancesGroups))
}

// GetDocumentsGroups mocks base method.
func (m *MockQueryResult) GetDocumentsGroups() []v2.Documents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentsGroups")
	ret0, _ := ret[0].([]v2.Documents)
	return ret0
}

// GetDocumentsGroups indicates an expected call of GetDocumentsGroups.
func (mr *MockQueryResultMockRecorder) GetDocumentsGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentsGroups", reflect.TypeOf((*MockQueryResult)(nil).GetDocumentsGroups))
}

// GetEmbeddingsGroups mocks base method.
func (m *MockQueryResult) GetEmbeddingsGroups() []embeddings.Embeddings {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmbeddingsGroups")
	ret0, _ := ret[0].([]embeddings.Embeddings)
	return ret0
}

// GetEmbeddingsGroups indicates an expected call of GetEmbeddingsGroups.
func (mr *MockQueryResultMockRecorder) GetEmbeddingsGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmbeddingsGroups", reflect.TypeOf((*MockQueryResult)(nil).GetEmbeddingsGroups))
}

// GetIDGroups mocks base method.
func (m *MockQueryResult) GetIDGroups() []v2.DocumentIDs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDGroups")
	ret0, _ := ret[0].([]v2.DocumentIDs)
	return ret0
}

// GetIDGroups indicates an expected call of GetIDGroups.
func (mr *MockQueryResultMockRecorder) GetIDGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDGroups", reflect.TypeOf((*MockQueryResult)(nil).GetIDGroups))
}

// GetMetadatasGroups mocks base method.
func (m *MockQueryResult) GetMetadatasGroups() []v2.DocumentMetadatas {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadatasGroups")
	ret0, _ := ret[0].([]v2.DocumentMetadatas)
	return ret0
}

// GetMetadatasGroups indicates an expected call of GetMetadatasGroups.
func (mr *MockQueryResultMockRecorder) GetMetadatasGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadatasGroups", reflect.TypeOf((*MockQueryResult)(nil).GetMetadatasGroups))
}

// ToRecordsGroups mocks base method.
func (m *MockQueryResult) ToRecordsGroups() []v2.Records {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRecordsGroups")
	ret0, _ := ret[0].([]v2.Records)
	return ret0
}

// ToRecordsGroups indicates an expected call of ToRecordsGroups.
func (mr *MockQueryResultMockRecorder) ToRecordsGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRecordsGroups", reflect.TypeOf((*MockQueryResult)(nil).ToRecordsGroups))
}

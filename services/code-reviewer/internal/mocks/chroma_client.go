// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/saeedzare/Documents/go/pkg/mod/github.com/amikos-tech/chroma-go@v0.2.3/pkg/api/v2/client.go
//
// Generated by this command:
//
//	mockgen -source=/Users/saeedzare/Documents/go/pkg/mod/github.com/amikos-tech/chroma-go@v0.2.3/pkg/api/v2/client.go -destination=mocks/chroma_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v2 "github.com/amikos-tech/chroma-go/pkg/api/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CountCollections mocks base method.
func (m *MockClient) CountCollections(ctx context.Context, opts ...v2.CountCollectionsOption) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountCollections", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCollections indicates an expected call of CountCollections.
func (mr *MockClientMockRecorder) CountCollections(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCollections", reflect.TypeOf((*MockClient)(nil).CountCollections), varargs...)
}

// CreateCollection mocks base method.
func (m *MockClient) CreateCollection(ctx context.Context, name string, options ...v2.CreateCollectionOption) (v2.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCollection", varargs...)
	ret0, _ := ret[0].(v2.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection.
func (mr *MockClientMockRecorder) CreateCollection(ctx, name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockClient)(nil).CreateCollection), varargs...)
}

// CreateDatabase mocks base method.
func (m *MockClient) CreateDatabase(ctx context.Context, db v2.Database) (v2.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", ctx, db)
	ret0, _ := ret[0].(v2.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockClientMockRecorder) CreateDatabase(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockClient)(nil).CreateDatabase), ctx, db)
}

// CreateTenant mocks base method.
func (m *MockClient) CreateTenant(ctx context.Context, tenant v2.Tenant) (v2.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", ctx, tenant)
	ret0, _ := ret[0].(v2.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockClientMockRecorder) CreateTenant(ctx, tenant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockClient)(nil).CreateTenant), ctx, tenant)
}

// CurrentDatabase mocks base method.
func (m *MockClient) CurrentDatabase() v2.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentDatabase")
	ret0, _ := ret[0].(v2.Database)
	return ret0
}

// CurrentDatabase indicates an expected call of CurrentDatabase.
func (mr *MockClientMockRecorder) CurrentDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentDatabase", reflect.TypeOf((*MockClient)(nil).CurrentDatabase))
}

// CurrentTenant mocks base method.
func (m *MockClient) CurrentTenant() v2.Tenant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTenant")
	ret0, _ := ret[0].(v2.Tenant)
	return ret0
}

// CurrentTenant indicates an expected call of CurrentTenant.
func (mr *MockClientMockRecorder) CurrentTenant() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTenant", reflect.TypeOf((*MockClient)(nil).CurrentTenant))
}

// DeleteCollection mocks base method.
func (m *MockClient) DeleteCollection(ctx context.Context, name string, options ...v2.DeleteCollectionOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCollection", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClientMockRecorder) DeleteCollection(ctx, name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClient)(nil).DeleteCollection), varargs...)
}

// DeleteDatabase mocks base method.
func (m *MockClient) DeleteDatabase(ctx context.Context, db v2.Database) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", ctx, db)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockClientMockRecorder) DeleteDatabase(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockClient)(nil).DeleteDatabase), ctx, db)
}

// GetCollection mocks base method.
func (m *MockClient) GetCollection(ctx context.Context, name string, opts ...v2.GetCollectionOption) (v2.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCollection", varargs...)
	ret0, _ := ret[0].(v2.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockClientMockRecorder) GetCollection(ctx, name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockClient)(nil).GetCollection), varargs...)
}

// GetDatabase mocks base method.
func (m *MockClient) GetDatabase(ctx context.Context, db v2.Database) (v2.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase", ctx, db)
	ret0, _ := ret[0].(v2.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockClientMockRecorder) GetDatabase(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockClient)(nil).GetDatabase), ctx, db)
}

// GetIdentity mocks base method.
func (m *MockClient) GetIdentity(ctx context.Context) (v2.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", ctx)
	ret0, _ := ret[0].(v2.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockClientMockRecorder) GetIdentity(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockClient)(nil).GetIdentity), ctx)
}

// GetOrCreateCollection mocks base method.
func (m *MockClient) GetOrCreateCollection(ctx context.Context, name string, options ...v2.CreateCollectionOption) (v2.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrCreateCollection", varargs...)
	ret0, _ := ret[0].(v2.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateCollection indicates an expected call of GetOrCreateCollection.
func (mr *MockClientMockRecorder) GetOrCreateCollection(ctx, name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateCollection", reflect.TypeOf((*MockClient)(nil).GetOrCreateCollection), varargs...)
}

// GetTenant mocks base method.
func (m *MockClient) GetTenant(ctx context.Context, tenant v2.Tenant) (v2.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", ctx, tenant)
	ret0, _ := ret[0].(v2.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockClientMockRecorder) GetTenant(ctx, tenant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockClient)(nil).GetTenant), ctx, tenant)
}

// GetVersion mocks base method.
func (m *MockClient) GetVersion(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockClientMockRecorder) GetVersion(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockClient)(nil).GetVersion), ctx)
}

// Heartbeat mocks base method.
func (m *MockClient) Heartbeat(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockClientMockRecorder) Heartbeat(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockClient)(nil).Heartbeat), ctx)
}

// ListCollections mocks base method.
func (m *MockClient) ListCollections(ctx context.Context, opts ...v2.ListCollectionsOption) ([]v2.Collection, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCollections", varargs...)
	ret0, _ := ret[0].([]v2.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections.
func (mr *MockClientMockRecorder) ListCollections(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockClient)(nil).ListCollections), varargs...)
}

// ListDatabases mocks base method.
func (m *MockClient) ListDatabases(ctx context.Context, tenant v2.Tenant) ([]v2.Database, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", ctx, tenant)
	ret0, _ := ret[0].([]v2.Database)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockClientMockRecorder) ListDatabases(ctx, tenant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockClient)(nil).ListDatabases), ctx, tenant)
}

// PreFlight mocks base method.
func (m *MockClient) PreFlight(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreFlight", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreFlight indicates an expected call of PreFlight.
func (mr *MockClientMockRecorder) PreFlight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreFlight", reflect.TypeOf((*MockClient)(nil).PreFlight), ctx)
}

// Reset mocks base method.
func (m *MockClient) Reset(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockClientMockRecorder) Reset(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockClient)(nil).Reset), ctx)
}

// UseDatabase mocks base method.
func (m *MockClient) UseDatabase(ctx context.Context, database v2.Database) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseDatabase", ctx, database)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseDatabase indicates an expected call of UseDatabase.
func (mr *MockClientMockRecorder) UseDatabase(ctx, database any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDatabase", reflect.TypeOf((*MockClient)(nil).UseDatabase), ctx, database)
}

// UseTenant mocks base method.
func (m *MockClient) UseTenant(ctx context.Context, tenant v2.Tenant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTenant", ctx, tenant)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseTenant indicates an expected call of UseTenant.
func (mr *MockClientMockRecorder) UseTenant(ctx, tenant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTenant", reflect.TypeOf((*MockClient)(nil).UseTenant), ctx, tenant)
}

// MockCollectionLifecycleOp is a mock of CollectionLifecycleOp interface.
type MockCollectionLifecycleOp struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionLifecycleOpMockRecorder
	isgomock struct{}
}

// MockCollectionLifecycleOpMockRecorder is the mock recorder for MockCollectionLifecycleOp.
type MockCollectionLifecycleOpMockRecorder struct {
	mock *MockCollectionLifecycleOp
}

// NewMockCollectionLifecycleOp creates a new mock instance.
func NewMockCollectionLifecycleOp(ctrl *gomock.Controller) *MockCollectionLifecycleOp {
	mock := &MockCollectionLifecycleOp{ctrl: ctrl}
	mock.recorder = &MockCollectionLifecycleOpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionLifecycleOp) EXPECT() *MockCollectionLifecycleOpMockRecorder {
	return m.recorder
}

// PrepareAndValidateCollectionRequest mocks base method.
func (m *MockCollectionLifecycleOp) PrepareAndValidateCollectionRequest() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareAndValidateCollectionRequest")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareAndValidateCollectionRequest indicates an expected call of PrepareAndValidateCollectionRequest.
func (mr *MockCollectionLifecycleOpMockRecorder) PrepareAndValidateCollectionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareAndValidateCollectionRequest", reflect.TypeOf((*MockCollectionLifecycleOp)(nil).PrepareAndValidateCollectionRequest))
}

// MockResourceOperation is a mock of ResourceOperation interface.
type MockResourceOperation struct {
	ctrl     *gomock.Controller
	recorder *MockResourceOperationMockRecorder
	isgomock struct{}
}

// MockResourceOperationMockRecorder is the mock recorder for MockResourceOperation.
type MockResourceOperationMockRecorder struct {
	mock *MockResourceOperation
}

// NewMockResourceOperation creates a new mock instance.
func NewMockResourceOperation(ctrl *gomock.Controller) *MockResourceOperation {
	mock := &MockResourceOperation{ctrl: ctrl}
	mock.recorder = &MockResourceOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceOperation) EXPECT() *MockResourceOperationMockRecorder {
	return m.recorder
}

// Operation mocks base method.
func (m *MockResourceOperation) Operation() v2.OperationType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Operation")
	ret0, _ := ret[0].(v2.OperationType)
	return ret0
}

// Operation indicates an expected call of Operation.
func (mr *MockResourceOperationMockRecorder) Operation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operation", reflect.TypeOf((*MockResourceOperation)(nil).Operation))
}

// Resource mocks base method.
func (m *MockResourceOperation) Resource() v2.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource")
	ret0, _ := ret[0].(v2.Resource)
	return ret0
}

// Resource indicates an expected call of Resource.
func (mr *MockResourceOperationMockRecorder) Resource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockResourceOperation)(nil).Resource))
}

// MockPreFlightConditioner is a mock of PreFlightConditioner interface.
type MockPreFlightConditioner struct {
	ctrl     *gomock.Controller
	recorder *MockPreFlightConditionerMockRecorder
	isgomock struct{}
}

// MockPreFlightConditionerMockRecorder is the mock recorder for MockPreFlightConditioner.
type MockPreFlightConditionerMockRecorder struct {
	mock *MockPreFlightConditioner
}

// NewMockPreFlightConditioner creates a new mock instance.
func NewMockPreFlightConditioner(ctrl *gomock.Controller) *MockPreFlightConditioner {
	mock := &MockPreFlightConditioner{ctrl: ctrl}
	mock.recorder = &MockPreFlightConditionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreFlightConditioner) EXPECT() *MockPreFlightConditionerMockRecorder {
	return m.recorder
}

// GetPreFlightConditionsRaw mocks base method.
func (m *MockPreFlightConditioner) GetPreFlightConditionsRaw() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreFlightConditionsRaw")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetPreFlightConditionsRaw indicates an expected call of GetPreFlightConditionsRaw.
func (mr *MockPreFlightConditionerMockRecorder) GetPreFlightConditionsRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreFlightConditionsRaw", reflect.TypeOf((*MockPreFlightConditioner)(nil).GetPreFlightConditionsRaw))
}

// Satisfies mocks base method.
func (m *MockPreFlightConditioner) Satisfies(resourceOperation v2.ResourceOperation, metric any, metricName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Satisfies", resourceOperation, metric, metricName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Satisfies indicates an expected call of Satisfies.
func (mr *MockPreFlightConditionerMockRecorder) Satisfies(resourceOperation, metric, metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Satisfies", reflect.TypeOf((*MockPreFlightConditioner)(nil).Satisfies), resourceOperation, metric, metricName)
}

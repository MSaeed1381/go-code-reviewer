// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/saeedzare/go_code_reviewer/services/code-reviewer/internal/vsc/vsc.go
//
// Generated by this command:
//
//	mockgen -source=/Users/saeedzare/go_code_reviewer/services/code-reviewer/internal/vsc/vsc.go -destination=/Users/saeedzare/go_code_reviewer/services/code-reviewer/internal/vsc/mocks/vsc_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVersionControlSystem is a mock of VersionControlSystem interface.
type MockVersionControlSystem struct {
	ctrl     *gomock.Controller
	recorder *MockVersionControlSystemMockRecorder
	isgomock struct{}
}

// MockVersionControlSystemMockRecorder is the mock recorder for MockVersionControlSystem.
type MockVersionControlSystemMockRecorder struct {
	mock *MockVersionControlSystem
}

// NewMockVersionControlSystem creates a new mock instance.
func NewMockVersionControlSystem(ctrl *gomock.Controller) *MockVersionControlSystem {
	mock := &MockVersionControlSystem{ctrl: ctrl}
	mock.recorder = &MockVersionControlSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionControlSystem) EXPECT() *MockVersionControlSystemMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockVersionControlSystem) Clone(ctx context.Context, url, branch string) (string, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, url, branch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Clone indicates an expected call of Clone.
func (mr *MockVersionControlSystemMockRecorder) Clone(ctx, url, branch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVersionControlSystem)(nil).Clone), ctx, url, branch)
}

// DownloadUrl mocks base method.
func (m *MockVersionControlSystem) DownloadUrl(ctx context.Context, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadUrl", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadUrl indicates an expected call of DownloadUrl.
func (mr *MockVersionControlSystemMockRecorder) DownloadUrl(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadUrl", reflect.TypeOf((*MockVersionControlSystem)(nil).DownloadUrl), ctx, url)
}

// PostPRComment mocks base method.
func (m *MockVersionControlSystem) PostPRComment(ctx context.Context, prNumber int, body, owner, repo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostPRComment", ctx, prNumber, body, owner, repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostPRComment indicates an expected call of PostPRComment.
func (mr *MockVersionControlSystemMockRecorder) PostPRComment(ctx, prNumber, body, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPRComment", reflect.TypeOf((*MockVersionControlSystem)(nil).PostPRComment), ctx, prNumber, body, owner, repo)
}

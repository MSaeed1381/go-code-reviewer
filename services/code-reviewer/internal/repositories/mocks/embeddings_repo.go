// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/saeedzare/go_code_reviewer/services/code-reviewer/internal/repositories/embeddings_repo.go
//
// Generated by this command:
//
//	mockgen -source=/Users/saeedzare/go_code_reviewer/services/code-reviewer/internal/repositories/embeddings_repo.go -destination=/Users/saeedzare/go_code_reviewer/services/code-reviewer/internal/repositories/mocks/embeddings_repo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "go_code_reviewer/services/code-reviewer/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmbeddingsRepository is a mock of EmbeddingsRepository interface.
type MockEmbeddingsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmbeddingsRepositoryMockRecorder
	isgomock struct{}
}

// MockEmbeddingsRepositoryMockRecorder is the mock recorder for MockEmbeddingsRepository.
type MockEmbeddingsRepositoryMockRecorder struct {
	mock *MockEmbeddingsRepository
}

// NewMockEmbeddingsRepository creates a new mock instance.
func NewMockEmbeddingsRepository(ctrl *gomock.Controller) *MockEmbeddingsRepository {
	mock := &MockEmbeddingsRepository{ctrl: ctrl}
	mock.recorder = &MockEmbeddingsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbeddingsRepository) EXPECT() *MockEmbeddingsRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEmbeddingsRepository) Add(ctx context.Context, snippets []*models.Snippet, projectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, snippets, projectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockEmbeddingsRepositoryMockRecorder) Add(ctx, snippets, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEmbeddingsRepository)(nil).Add), ctx, snippets, projectId)
}

// GetNearestRecord mocks base method.
func (m *MockEmbeddingsRepository) GetNearestRecord(ctx context.Context, vectorEmbedding []float32, nResult int, projectId string) ([]*models.Snippet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestRecord", ctx, vectorEmbedding, nResult, projectId)
	ret0, _ := ret[0].([]*models.Snippet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestRecord indicates an expected call of GetNearestRecord.
func (mr *MockEmbeddingsRepositoryMockRecorder) GetNearestRecord(ctx, vectorEmbedding, nResult, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestRecord", reflect.TypeOf((*MockEmbeddingsRepository)(nil).GetNearestRecord), ctx, vectorEmbedding, nResult, projectId)
}

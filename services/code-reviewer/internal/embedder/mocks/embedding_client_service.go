// Code generated by MockGen. DO NOT EDIT.
// Source: embedding_client.go
//
// Generated by this command:
//
//	mockgen -source=embedding_client.go -destination=mocks/embedding_client_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	embedder "go_code_reviewer/services/code-reviewer/internal/embedder"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmbeddingClient is a mock of EmbeddingClient interface.
type MockEmbeddingClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmbeddingClientMockRecorder
	isgomock struct{}
}

// MockEmbeddingClientMockRecorder is the mock recorder for MockEmbeddingClient.
type MockEmbeddingClientMockRecorder struct {
	mock *MockEmbeddingClient
}

// NewMockEmbeddingClient creates a new mock instance.
func NewMockEmbeddingClient(ctrl *gomock.Controller) *MockEmbeddingClient {
	mock := &MockEmbeddingClient{ctrl: ctrl}
	mock.recorder = &MockEmbeddingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbeddingClient) EXPECT() *MockEmbeddingClientMockRecorder {
	return m.recorder
}

// CreateEmbeddings mocks base method.
func (m *MockEmbeddingClient) CreateEmbeddings(ctx context.Context, embeddingModel string, texts []string) ([]embedder.Embedding, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmbeddings", ctx, embeddingModel, texts)
	ret0, _ := ret[0].([]embedder.Embedding)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmbeddings indicates an expected call of CreateEmbeddings.
func (mr *MockEmbeddingClientMockRecorder) CreateEmbeddings(ctx, embeddingModel, texts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmbeddings", reflect.TypeOf((*MockEmbeddingClient)(nil).CreateEmbeddings), ctx, embeddingModel, texts)
}
